const puppeteer = require('puppeteer-core');
const chromium = require('@sparticuz/chromium');

exports.handler = async (event) => {
    console.log('\n========================================');
    console.log('ü§ñ ANALYZE START');
    console.log('========================================\n');
    
    const { url, apiKey } = JSON.parse(event.body || '{}');
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!url) {
        return {
            statusCode: 400,
            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
            body: JSON.stringify({ success: false, error: 'URL required' })
        };
    }
    
    if (!apiKey) {
        return {
            statusCode: 400,
            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
            body: JSON.stringify({ success: false, error: 'API key required' })
        };
    }
    
    console.log('URL:', url);
    console.log('API Key:', apiKey.substring(0, 10) + '...');
    
    let browser;
    
    try {
        // –®–ê–ì 1: –°–∫—Ä–∏–Ω—à–æ—Ç
        console.log('\nüì∏ Step 1: Taking screenshot...');
        
        browser = await puppeteer.launch({
            args: chromium.args,
            defaultViewport: chromium.defaultViewport,
            executablePath: await chromium.executablePath(),
            headless: chromium.headless
        });
        
        const page = await browser.newPage();
        await page.setViewport({ width: 1920, height: 1080 });
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');
        
        await page.goto(url, {
            waitUntil: 'domcontentloaded',
            timeout: 30000
        });
        
        await page.waitForTimeout(2000);
        
        const screenshot = await page.screenshot({
            type: 'jpeg',
            quality: 75,
            fullPage: false
        });
        
        await browser.close();
        
        console.log('‚úÖ Screenshot taken:', (screenshot.length / 1024).toFixed(2), 'KB');
        
        const base64 = screenshot.toString('base64');
        const screenshotDataUrl = `data:image/jpeg;base64,${base64}`;
        
        // –®–ê–ì 2: –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI
        console.log('\nü§ñ Step 2: Analyzing with OpenAI...');
        
        const analysisRes = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey}`
            },
            body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: [{
                    role: 'user',
                    content: [
                        {
                            type: 'text',
                            text: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞ ${url} –∏ –Ω–∞–π–¥–∏ –º–µ—Å—Ç–∞ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã.

–û–ø—Ä–µ–¥–µ–ª–∏ –∑–æ–Ω—ã:
- Header (—à–∞–ø–∫–∞)
- Sidebar (–±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å)
- Content (–∫–æ–Ω—Ç–µ–Ω—Ç)
- Footer (–ø–æ–¥–≤–∞–ª)

–î–ª—è –∫–∞–∂–¥–æ–π –∑–æ–Ω—ã:
{
  "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
  "available": true/false,
  "size": "—Ä–∞–∑–º–µ—Ä –±–∞–Ω–Ω–µ—Ä–∞",
  "priority": "high/medium/low",
  "description": "–æ–ø–∏—Å–∞–Ω–∏–µ"
}

–û–ø—Ä–µ–¥–µ–ª–∏ —è–∑—ã–∫ —Å–∞–π—Ç–∞ (ru/en).

–í–µ—Ä–Ω–∏ JSON:
{
  "zones": [...],
  "language": "ru"
}`
                        },
                        {
                            type: 'image_url',
                            image_url: {
                                url: screenshotDataUrl,
                                detail: 'low'
                            }
                        }
                    ]
                }],
                response_format: { type: 'json_object' },
                max_tokens: 2000
            })
        });
        
        if (!analysisRes.ok) {
            const error = await analysisRes.json();
            throw new Error(`OpenAI Vision: ${error.error?.message || 'Unknown error'}`);
        }
        
        const analysisData = await analysisRes.json();
        const analysis = JSON.parse(analysisData.choices[0].message.content);
        
        console.log('‚úÖ Analysis complete');
        console.log('Zones found:', analysis.zones.length);
        
        // –®–ê–ì 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        console.log('\n‚úçÔ∏è Step 3: Generating proposal...');
        
        const availableZones = analysis.zones.filter(z => z.available);
        
        let proposal = '–ù–∞ –¥–∞–Ω–Ω–æ–º —Å–∞–π—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç.';
        
        if (availableZones.length > 0) {
            const zonesText = availableZones.map(z => 
                `${z.name} ‚Äî ${z.description}`
            ).join('\n');
            
            const proposalPrompt = analysis.language === 'en' ?
                `Write professional email for ${url}.\n\nZones:\n${zonesText}` :
                `–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è ${url}.\n\n–ú–µ—Å—Ç–∞:\n${zonesText}\n\n–ü—Ä–æ Adlook.`;
            
            const proposalRes = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify({
                    model: 'gpt-4o-mini',
                    messages: [{ role: 'user', content: proposalPrompt }],
                    max_tokens: 1500
                })
            });
            
            const proposalData = await proposalRes.json();
            proposal = proposalData.choices[0].message.content;
        }
        
        console.log('‚úÖ Proposal generated');
        
        // –í–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\n‚úÖ === SUCCESS ===\n');
        
        return {
            statusCode: 200,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            body: JSON.stringify({
                success: true,
                screenshot: base64,
                zones: analysis.zones,
                language: analysis.language,
                proposal: proposal
            })
        };
        
    } catch (error) {
        console.error('\n‚ùå === ERROR ===');
        console.error('Message:', error.message);
        console.error('Stack:', error.stack);
        
        if (browser) await browser.close();
        
        return {
            statusCode: 500,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            body: JSON.stringify({
                success: false,
                error: error.message
            })
        };
    }
};
