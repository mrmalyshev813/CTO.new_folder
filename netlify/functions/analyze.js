const { OpenAI } = require('openai');
const cheerio = require('cheerio');

exports.handler = async (event) => {
    console.log('\n========================================');
    console.log('ü§ñ OPENAI ANALYSIS START');
    console.log('========================================');
    console.log('üìç Step 0: Initial request analysis');
    console.log('‚è∞ Timestamp:', new Date().toISOString());
    console.log('üîß Node version:', process.version);
    console.log('üíæ Memory usage:', process.memoryUsage().heapUsed / 1024 / 1024, 'MB');
    console.log('üåê Environment URL:', process.env.URL);
    console.log('üì¶ Event body size:', JSON.stringify(event.body || '{}').length, 'bytes');
    console.log('üîë OpenAI API key present:', !!process.env.OPENAI_API_KEY);
    console.log('üìã Request headers:', Object.keys(event.headers || {}));
    
    // Handle CORS preflight
    if (event.httpMethod === 'OPTIONS') {
        console.log('‚úÖ CORS preflight request');
        return {
            statusCode: 200,
            headers: {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type, X-OpenAI-API-Key',
                'Access-Control-Allow-Methods': 'POST, OPTIONS'
            },
            body: ''
        };
    }
    
    if (event.httpMethod !== 'POST') {
        console.log('‚ùå Method not allowed:', event.httpMethod);
        return {
            statusCode: 405,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            body: JSON.stringify({ error: 'Method not allowed' })
        };
    }

    console.log('\nüìç Step 1: Parsing request body...');
    let body;
    try {
        body = event.body ? JSON.parse(event.body) : {};
        console.log('‚úÖ Request body parsed successfully');
        console.log('üìä Body keys:', Object.keys(body));
        console.log('üîó URL provided:', !!body.url);
        console.log('üìè Body size:', JSON.stringify(body).length, 'bytes');
    } catch (parseError) {
        console.error('‚ùå Failed to parse request body:', parseError.message);
        console.error('üîç Raw body preview:', (event.body || '').substring(0, 200));
        return {
            statusCode: 400,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            body: JSON.stringify({
                success: false,
                error: 'Invalid request payload. Please send JSON with a "url" field.'
            })
        };
    }

    const rawUrl = body?.url;

    if (!rawUrl || typeof rawUrl !== 'string' || !rawUrl.trim()) {
        console.error('‚ùå URL is missing or invalid in the request');
        console.error('üìä rawUrl:', rawUrl);
        console.error('üìä Type:', typeof rawUrl);
        console.error('üìä Length:', rawUrl?.length);
        return {
            statusCode: 400,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            body: JSON.stringify({
                success: false,
                error: 'Website URL is required. Provide it in the request body as {"url": "https://example.com"}.'
            })
        };
    }

    console.log('\nüìç Step 2: Normalizing URL...');
    console.log('üîó Original URL:', rawUrl);
    console.log('üìè Original length:', rawUrl.length);
    console.log('üîç Has protocol:', /^https?:\/\//i.test(rawUrl));
    
    const normalizedUrl = normalizeUrl(rawUrl);

    if (!normalizedUrl) {
        console.error('‚ùå URL normalization failed');
        console.error('üìä Input:', rawUrl);
        console.error('üìä Output:', normalizedUrl);
        return {
            statusCode: 400,
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            body: JSON.stringify({
                success: false,
                error: 'The provided URL is invalid. Please use a full website address like "https://example.com".'
            })
        };
    }

    const url = normalizedUrl;
    console.log('‚úÖ URL normalized successfully');
    console.log('üîó Final URL:', url);
    console.log('üìè Final length:', url.length);
    
    const analysisStartTime = Date.now();
    console.log('‚è±Ô∏è Analysis started at:', new Date(analysisStartTime).toISOString());
    
    try {
        console.log('\nüìç Step 3: Checking API key configuration...');
        // Get API key from header or environment variable
        const apiKey = event.headers['x-openai-api-key'] || process.env.OPENAI_API_KEY;
        const apiKeySource = event.headers['x-openai-api-key'] ? 'header' : 'environment';
        
        console.log('üîë API key source:', apiKeySource);
        console.log('üîë API key present:', !!apiKey);
        console.log('üîë API key length:', apiKey?.length || 0);
        console.log('üîë API key prefix:', apiKey?.substring(0, 10) + '...');
        
        if (!apiKey) {
            console.error('‚ùå API key is missing from both header and environment');
            console.error('üîç Header keys:', Object.keys(event.headers));
            console.error('üîç Environment OPENAI_API_KEY:', !!process.env.OPENAI_API_KEY);
            return {
                statusCode: 400,
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                },
                body: JSON.stringify({
                    success: false,
                    error: 'The OPENAI_API_KEY is missing. Please configure your API key in the settings.'
                })
            };
        }
        
        console.log('‚úÖ API key validated');
        
        console.log('\nüìç Step 4: Checking website availability...');
        console.log('üåê Target URL:', url);
        console.log('‚è±Ô∏è Availability timeout: 8000ms');
        
        const availabilityStart = Date.now();
        const availability = await ensureWebsiteAccessible(url);
        const availabilityTime = Date.now() - availabilityStart;
        
        console.log('‚è±Ô∏è Availability check completed in', availabilityTime, 'ms');
        console.log('‚úÖ Available:', availability.ok);
        console.log('üìä Status code:', availability.statusCode);
        console.log('üìä Reason:', availability.reason);
        
        if (!availability.ok) {
            console.error('‚ùå Website availability check failed:', availability.reason);
            console.error('üìä Full availability object:', JSON.stringify(availability, null, 2));
            return {
                statusCode: availability.statusCode || 504,
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Headers': 'Content-Type, X-OpenAI-API-Key',
                    'Access-Control-Allow-Methods': 'POST, OPTIONS'
                },
                body: JSON.stringify({
                    success: false,
                    error: availability.message
                })
            };
        }
        console.log('‚úÖ Website availability confirmed');
        
        console.log('\nüìç Step 5: Initializing OpenAI client...');
        const openaiStart = Date.now();
        const openai = new OpenAI({
            apiKey: apiKey
        });
        const openaiTime = Date.now() - openaiStart;
        console.log('‚úÖ OpenAI client initialized in', openaiTime, 'ms');
        console.log('üíæ Memory after OpenAI init:', process.memoryUsage().heapUsed / 1024 / 1024, 'MB');
        
        console.log('\nüìç Step 6: Getting screenshot...');
        console.log('üì∏ Screenshot function URL:', `${process.env.URL}/.netlify/functions/screenshot`);
        console.log('‚è±Ô∏è Screenshot timeout: 90000ms');
        console.log('üì¶ Request payload size:', JSON.stringify({ url }).length, 'bytes');
        
        const screenshotController = new AbortController();
        const screenshotTimeout = setTimeout(() => screenshotController.abort(), 90000);
        
        const screenshotStart = Date.now();
        
        try {
            const screenshotResponse = await fetch(`${process.env.URL}/.netlify/functions/screenshot`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ url }),
                signal: screenshotController.signal
            });
            
            clearTimeout(screenshotTimeout);
            const screenshotTime = Date.now() - screenshotStart;
            
            console.log('‚è±Ô∏è Screenshot request completed in', screenshotTime, 'ms');
            console.log('üìä Response status:', screenshotResponse.status);
            console.log('üìä Response headers:', Object.keys(screenshotResponse.headers));
            
            if (!screenshotResponse.ok) {
                console.error('‚ùå Screenshot request failed with status:', screenshotResponse.status);
                
                let errorDetails;
                try {
                    errorDetails = await screenshotResponse.json();
                    console.error('üìä Error details from screenshot:', JSON.stringify(errorDetails, null, 2));
                } catch (parseError) {
                    console.error('‚ùå Failed to parse screenshot error response:', parseError.message);
                    errorDetails = { error: 'Failed to get screenshot', details: null };
                }
                
                const error = new Error(errorDetails.error || 'Failed to get screenshot');
                error.details = errorDetails.details;
                error.timestamp = errorDetails.timestamp;
                error.screenshotStatus = screenshotResponse.status;
                throw error;
            }
            
            const screenshotData = await screenshotResponse.json();
            console.log('‚úÖ Screenshot response parsed successfully');
            console.log('üìä Response keys:', Object.keys(screenshotData));
            console.log('üìä Success flag:', screenshotData.success);
            
            if (!screenshotData.success) {
                console.error('‚ùå Screenshot function reported failure');
                console.error('üìä Error:', screenshotData.error);
                console.error('üìä Details:', screenshotData.details);
                
                const error = new Error(screenshotData.error || 'Screenshot failed');
                error.details = screenshotData.details;
                error.timestamp = screenshotData.timestamp;
                throw error;
            }
            
            const screenshot = screenshotData.screenshot;
            console.log('‚úÖ Screenshot obtained successfully');
            console.log('üìä Screenshot length:', screenshot.length);
            console.log('üìä Screenshot MB:', (screenshot.length / (1024 * 1024)).toFixed(2));
            
            // –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if (screenshotData.metadata) {
                console.log('üìä === SCREENSHOT METRICS ===');
                console.log('   üéØ Attempts:', screenshotData.metadata.attempts || 1);
                console.log('   ‚è±Ô∏è Load time:', screenshotData.metadata.loadTime || 'N/A', 'ms');
                console.log('   üö´ Blocked resources:', screenshotData.metadata.blockedResources || 0);
                console.log('   ‚úÖ Allowed resources:', screenshotData.metadata.allowedResources || 0);
                console.log('   üìä Performance:', JSON.stringify(screenshotData.metadata.performanceMetrics, null, 2));
                console.log('   üíæ Memory usage:', JSON.stringify(screenshotData.metadata.memoryUsage, null, 2));
            }
            
        } catch (screenshotError) {
            clearTimeout(screenshotTimeout);
            if (screenshotError.name === 'AbortError') {
                console.error('‚ùå Screenshot request timed out after 90 seconds');
                throw new Error('Screenshot request timeout: The screenshot function took too long to respond');
            }
            throw screenshotError;
        }
        
        console.log('\nüìç Step 7: Analyzing with OpenAI Vision API...');
        console.log('ü§ñ Model: gpt-4o');
        console.log('üìä Max tokens: 2000');
        console.log('üìÑ Response format: json_object');
        console.log('üñºÔ∏è Image detail: high');
        console.log('üìä Screenshot data URL length:', screenshot.length);
        
        const visionStart = Date.now();
        
        try {
            const visionCompletion = await openai.chat.completions.create({
                model: 'gpt-4o',
                messages: [{
                    role: 'user',
                    content: [
                        {
                            type: 'text',
                            text: `Analyze screenshot of ${url} for advertising opportunities.

Identify these ad zones:
1. Header (top navigation area)
2. Sidebar (left/right column)
3. Content (within main content)
4. Footer (bottom area)
5. Popup (modal windows)

For each zone provide:
- name: zone name
- available: true if space is FREE, false if OCCUPIED by ads
- size: banner size (e.g. "728x90", "300x250")
- priority: "high" for premium spots, "medium" for good spots, "low" for poor spots
- description: detailed description

Also detect website language (ru or en).

Return JSON:
{
  "zones": [
    {"name": "Header", "available": true, "size": "728x90", "priority": "high", "description": "..."}
  ],
  "language": "ru" or "en"
}`
                        },
                        {
                            type: 'image_url',
                            image_url: {
                                url: screenshot,
                                detail: 'high'
                            }
                        }
                    ]
                }],
                response_format: { type: 'json_object' },
                max_tokens: 2000
            });
            
            const visionTime = Date.now() - visionStart;
            console.log('‚úÖ Vision API succeeded in', visionTime, 'ms');
            console.log('üìä Usage tokens:', visionCompletion.usage);
            console.log('üìä Choices count:', visionCompletion.choices.length);
            console.log('üìä Finish reason:', visionCompletion.choices[0].finish_reason);
            
            const analysis = JSON.parse(visionCompletion.choices[0].message.content);
            console.log('‚úÖ Vision analysis parsed successfully');
            console.log('üéØ Zones found:', analysis.zones.length);
            console.log('üåê Language detected:', analysis.language);
            console.log('üìä Zones:', JSON.stringify(analysis.zones, null, 2));
            
        } catch (visionError) {
            console.error('\n‚ùå VISION API FAILED');
            console.error('üîç Error name:', visionError.name);
            console.error('üí¨ Error message:', visionError.message);
            console.error('üìä Error status:', visionError.status);
            console.error('üîë Error code:', visionError.code);
            console.error('üìã Error type:', visionError.type);
            console.error('üìä Full error:', JSON.stringify(visionError, null, 2));
            throw visionError;
        }
        
        console.log('\nüìç Step 8: Scraping website for contact info...');
        console.log('üåê Target URL:', url);
        console.log('‚è±Ô∏è Scraping timeout: 10000ms');
        
        const scrapingStart = Date.now();
        const scraped = await scrapeWebsite(url);
        const scrapingTime = Date.now() - scrapingStart;
        
        console.log('‚úÖ Scraping completed in', scrapingTime, 'ms');
        console.log('üìß Emails found:', scraped.emails.length);
        console.log('üìß Email list:', scraped.emails);
        console.log('üè¢ Company name:', scraped.companyName || 'Not found');
        console.log('üìÑ Title:', scraped.title || 'Not found');
        console.log('üìù Description:', scraped.description || 'Not found');
        
        console.log('\nüìç Step 9: Researching company owner...');
        console.log('üè¢ Company name:', scraped.companyName || 'Not available');
        console.log('ü§ñ Model: gpt-4o-mini');
        console.log('üìä Max tokens: 400');
        
        const researchStart = Date.now();
        const ownerInfo = await researchOwner(scraped.companyName, url, openai);
        const researchTime = Date.now() - researchStart;
        
        console.log('‚úÖ Research completed in', researchTime, 'ms');
        console.log('üìä Owner info length:', ownerInfo.length);
        console.log('üìÑ Owner info preview:', ownerInfo.substring(0, 200) + '...');
        
        console.log('\nüìç Step 10: Generating personalized proposal...');
        console.log('üåê URL:', url);
        console.log('üéØ Available zones:', analysis.zones.filter(z => z.available).length);
        console.log('üåê Language:', analysis.language);
        console.log('üè¢ Company:', scraped.companyName || 'Unknown');
        console.log('üìß Emails:', scraped.emails.length);
        console.log('ü§ñ Model: gpt-4o-mini');
        console.log('üìä Max tokens: 1500');
        console.log('üé≤ Temperature: 0.7');
        
        const proposalStart = Date.now();
        const proposal = await generateProposal({
            url,
            zones: analysis.zones,
            language: analysis.language,
            companyName: scraped.companyName,
            emails: scraped.emails,
            ownerInfo,
            openai
        });
        const proposalTime = Date.now() - proposalStart;
        
        console.log('‚úÖ Proposal generated in', proposalTime, 'ms');
        console.log('üìÑ Proposal length:', proposal.length);
        console.log('üìÑ Proposal preview:', proposal.substring(0, 300) + '...');
        
        const totalTime = Date.now() - analysisStartTime;
        
        console.log('\n========================================');
        console.log('‚úÖ OPENAI ANALYSIS COMPLETE');
        console.log('========================================');
        console.log('‚è±Ô∏è Total analysis time:', totalTime, 'ms');
        console.log('‚è±Ô∏è Total time (minutes):', (totalTime / 1000 / 60).toFixed(2));
        console.log('üíæ Final memory usage:', process.memoryUsage().heapUsed / 1024 / 1024, 'MB');
        console.log('üìä === TIMING BREAKDOWN ===');
        console.log('   Availability check:', availabilityTime, 'ms');
        console.log('   Screenshot capture:', screenshotTime, 'ms');
        console.log('   Vision analysis:', visionTime, 'ms');
        console.log('   Website scraping:', scrapingTime, 'ms');
        console.log('   Owner research:', researchTime, 'ms');
        console.log('   Proposal generation:', proposalTime, 'ms');
        console.log('========================================\n');
        
        return {
            statusCode: 200,
            headers: { 
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type, X-OpenAI-API-Key',
                'Access-Control-Allow-Methods': 'POST, OPTIONS'
            },
            body: JSON.stringify({
                success: true,
                screenshot,
                metadata: screenshotData.metadata,
                zones: analysis.zones,
                language: analysis.language,
                emails: scraped.emails,
                companyName: scraped.companyName,
                ownerInfo,
                proposal,
                performance: {
                    totalTime: totalTime,
                    availabilityTime: availabilityTime,
                    screenshotTime: screenshotTime,
                    visionTime: visionTime,
                    scrapingTime: scrapingTime,
                    researchTime: researchTime,
                    proposalTime: proposalTime
                }
            })
        };
        
    } catch (error) {
        console.error('\n========================================');
        console.error('‚ùå OPENAI ANALYSIS FAILED');
        console.error('========================================');
        console.error('üìç Error step: Unknown - check stack trace');
        console.error('üîç Error name:', error.name);
        console.error('üí¨ Error message:', error.message);
        console.error('üìã Error stack:', error.stack);
        console.error('‚è∞ Error timestamp:', new Date().toISOString());
        console.error('üíæ Memory at error:', process.memoryUsage().heapUsed / 1024 / 1024, 'MB');
        console.error('üìä Analysis elapsed:', Date.now() - analysisStartTime, 'ms');
        
        // Check if it's a timeout error
        let errorMessage = error.message;
        let statusCode = 500;
        
        if (error.name === 'AbortError' || error.message.includes('abort') || error.message.includes('timeout')) {
            errorMessage = 'Request timeout: The website took too long to respond. Please try again or check if the website is accessible.';
            statusCode = 504;
            console.error('‚è∞ Detected timeout error');
        }
        
        if (error.screenshotStatus) {
            console.error('üì∏ Screenshot error status:', error.screenshotStatus);
        }
        
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ
        const errorReport = {
            success: false,
            error: errorMessage,
            details: error.details || {
                errorType: error.name,
                errorMessage: error.message,
                errorStack: error.stack,
                url: url,
                timestamp: error.timestamp || new Date().toISOString(),
                memoryUsage: process.memoryUsage(),
                analysisElapsed: Date.now() - analysisStartTime
            },
            timestamp: error.timestamp || new Date().toISOString()
        };
        
        console.error('üìã DETAILED ERROR REPORT:');
        console.error(JSON.stringify(errorReport, null, 2));
        console.error('========================================\n');
        
        return {
            statusCode: statusCode,
            headers: { 
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type, X-OpenAI-API-Key',
                'Access-Control-Allow-Methods': 'POST, OPTIONS'
            },
            body: JSON.stringify(errorReport)
        };
    }
};

function normalizeUrl(rawUrl) {
    if (!rawUrl || typeof rawUrl !== 'string') {
        return null;
    }

    let candidate = rawUrl.trim();
    if (!candidate) {
        return null;
    }

    if (!/^https?:\/\//i.test(candidate)) {
        candidate = `https://${candidate}`;
    }

    try {
        const normalized = new URL(candidate);
        if (!normalized.hostname) {
            return null;
        }
        return normalized.toString();
    } catch {
        return null;
    }
}

async function ensureWebsiteAccessible(url) {
    const CHECK_TIMEOUT_MS = 8000;
    const HEADERS = {
        'User-Agent': 'Mozilla/5.0 (compatible; AdlookBot/1.0)',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
    };

    const attemptRequest = async (method) => {
        const controller = new AbortController();
        const timeout = setTimeout(() => controller.abort(), CHECK_TIMEOUT_MS);

        try {
            const response = await fetch(url, {
                method,
                headers: HEADERS,
                redirect: 'follow',
                signal: controller.signal
            });

            if (method === 'GET' && response.body && typeof response.body.cancel === 'function') {
                try {
                    await response.body.cancel();
                } catch {
                    // Ignore stream cancel errors
                }
            }

            return { response };
        } catch (error) {
            return { error };
        } finally {
            clearTimeout(timeout);
        }
    };

    const headResult = await attemptRequest('HEAD');

    if (headResult.response) {
        console.log(`üåê Website HEAD status: ${headResult.response.status}`);
        return { ok: true };
    }

    if (headResult.error && headResult.error.name !== 'AbortError') {
        console.log('‚ÑπÔ∏è HEAD request failed, trying GET fallback...');
        const getResult = await attemptRequest('GET');

        if (getResult.response) {
            console.log(`üåê Website GET fallback status: ${getResult.response.status}`);
            return { ok: true };
        }

        if (getResult.error) {
            const failure = createReachabilityFailure(getResult.error, url);
            console.error('‚ùå Website availability GET fallback error:', getResult.error);
            return failure;
        }
    }

    if (headResult.error) {
        const failure = createReachabilityFailure(headResult.error, url);
        console.error('‚ùå Website availability HEAD error:', headResult.error);
        return failure;
    }

    return { ok: true };
}

function createReachabilityFailure(error, url) {
    if (!error) {
        return {
            ok: false,
            statusCode: 504,
            reason: 'unknown_error',
            message: `Website unreachable: ${url} could not be reached. Please ensure it is accessible and try again.`
        };
    }

    if (error.name === 'AbortError') {
        return {
            ok: false,
            statusCode: 504,
            reason: 'timeout',
            message: 'Request timeout: The website took too long to respond. Please try again or check if the website is accessible.'
        };
    }

    const parts = [
        (error.code || '').toString().toLowerCase(),
        (error.cause && error.cause.code ? error.cause.code.toString().toLowerCase() : ''),
        (error.cause && error.cause.errno ? error.cause.errno.toString().toLowerCase() : ''),
        (error.message || '').toLowerCase()
    ].filter(Boolean);

    const combined = parts.join(' ');

    const mappings = [
        {
            match: 'enotfound',
            reason: 'dns_not_found',
            message: 'Website unreachable: DNS lookup failed. Please verify the domain name and try again.'
        },
        {
            match: 'eai_again',
            reason: 'dns_timeout',
            message: 'Website unreachable: Temporary DNS issue detected. Please try again shortly.'
        },
        {
            match: 'econnrefused',
            reason: 'connection_refused',
            message: 'Website unreachable: The server refused the connection. Please make sure the website is online.'
        },
        {
            match: 'etimedout',
            reason: 'timeout',
            message: 'Request timeout: The website took too long to respond. Please try again or check if the website is accessible.'
        },
        {
            match: 'self signed certificate',
            reason: 'ssl_error',
            message: 'Website unreachable: SSL certificate error detected. Please verify the website\'s certificate.'
        }
    ];

    for (const mapping of mappings) {
        if (combined.includes(mapping.match)) {
            return {
                ok: false,
                statusCode: 504,
                reason: mapping.reason,
                message: mapping.message
            };
        }
    }

    const fallbackReason = (error.code || error.cause?.code || 'network_error') ?
        (error.code || error.cause?.code || 'network_error').toString().toLowerCase() :
        'network_error';

    return {
        ok: false,
        statusCode: 504,
        reason: fallbackReason,
        message: `Website unreachable: ${url} could not be reached. Please ensure it is accessible and try again.`
    };
}

// Helper: Scrape website
async function scrapeWebsite(url) {
    console.log('üîß === SCRAPING HELPER START ===');
    console.log('üåê Scraping URL:', url);
    console.log('‚è±Ô∏è Timeout: 10000ms');
    console.log('ü§ñ User-Agent: Mozilla/5.0 (compatible; AdlookBot/1.0)');
    
    const scrapeStartTime = Date.now();
    
    try {
        console.log('üìç Step 1: Fetching website HTML...');
        const controller = new AbortController();
        const timeout = setTimeout(() => controller.abort(), 10000);
        
        const fetchStart = Date.now();
        const response = await fetch(url, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (compatible; AdlookBot/1.0)'
            },
            signal: controller.signal
        });
        clearTimeout(timeout);
        const fetchTime = Date.now() - fetchStart;
        
        console.log('‚úÖ HTML fetched in', fetchTime, 'ms');
        console.log('üìä Response status:', response.status);
        console.log('üìä Response headers:', Object.keys(response.headers));
        console.log('üìä Content-Type:', response.headers.get('content-type'));
        console.log('üìä Content-Length:', response.headers.get('content-length'));
        
        console.log('üìç Step 2: Parsing HTML with Cheerio...');
        const parseStart = Date.now();
        const html = await response.text();
        const parseTime = Date.now() - parseStart;
        
        console.log('‚úÖ HTML parsed in', parseTime, 'ms');
        console.log('üìä HTML length:', html.length);
        console.log('üìä HTML size:', (html.length / 1024).toFixed(2), 'KB');
        
        const $ = cheerio.load(html);
        
        console.log('üìç Step 3: Extracting emails...');
        const emailStart = Date.now();
        
        // Find emails in body text
        const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g;
        const bodyText = $('body').text();
        console.log('üìä Body text length:', bodyText.length);
        console.log('üìä Body text size:', (bodyText.length / 1024).toFixed(2), 'KB');
        
        const foundEmails = bodyText.match(emailRegex) || [];
        console.log('üìß Raw emails found in body:', foundEmails.length);
        console.log('üìß Body emails:', foundEmails);
        
        // Also check mailto links
        const mailtoLinks = $('a[href^="mailto:"]');
        console.log('üìß Mailto links found:', mailtoLinks.length);
        
        mailtoLinks.each((i, el) => {
            const href = $(el).attr('href');
            const email = href.replace('mailto:', '').split('?')[0];
            foundEmails.push(email);
            console.log(`üìß Mailto ${i + 1}:`, email);
        });
        
        const uniqueEmails = [...new Set(foundEmails)].filter(e => e && e.includes('@'));
        const emailTime = Date.now() - emailStart;
        
        console.log('‚úÖ Email extraction completed in', emailTime, 'ms');
        console.log('üìß Total unique emails:', uniqueEmails.length);
        console.log('üìß Final email list:', uniqueEmails);
        
        console.log('üìç Step 4: Extracting company information...');
        const companyStart = Date.now();
        
        // Find company name from meta tags
        const ogSiteName = $('meta[property="og:site_name"]').attr('content');
        const authorMeta = $('meta[name="author"]').attr('content');
        const titleText = $('title').text();
        
        console.log('üè¢ OG site name:', ogSiteName);
        console.log('üë§ Author meta:', authorMeta);
        console.log('üìÑ Title text:', titleText);
        
        let companyName = ogSiteName || authorMeta;
        
        if (!companyName) {
            console.log('üîß Extracting company name from title...');
            companyName = titleText.split('|')[0].split('-')[0].trim();
            console.log('üè¢ Company from title:', companyName);
        }
        
        // Try to find legal entity in footer
        console.log('üîß Searching for legal entity in footer...');
        const footerText = $('footer').text();
        console.log('üìÑ Footer text length:', footerText.length);
        console.log('üìÑ Footer preview:', footerText.substring(0, 200) + '...');
        
        const legalEntityMatch = footerText.match(/(–û–û–û|–ò–ü|–ê–û|–ó–ê–û|–ü–ê–û)\s+["¬´]?([^"¬ª\n]{3,50})["¬ª]?/);
        if (legalEntityMatch) {
            console.log('üè¢ Legal entity found:', legalEntityMatch[0]);
            if (!companyName) {
                companyName = legalEntityMatch[0];
                console.log('üè¢ Using legal entity as company name:', companyName);
            }
        } else {
            console.log('üîç No legal entity found in footer');
        }
        
        // Extract other meta information
        const description = $('meta[name="description"]').attr('content');
        console.log('üìù Description:', description);
        
        const companyTime = Date.now() - companyStart;
        console.log('‚úÖ Company extraction completed in', companyTime, 'ms');
        
        const totalTime = Date.now() - scrapeStartTime;
        
        console.log('üìä === SCRAPING SUMMARY ===');
        console.log('   ‚è±Ô∏è Total time:', totalTime, 'ms');
        console.log('   üìß Emails found:', uniqueEmails.length);
        console.log('   üè¢ Company name:', companyName || 'Not found');
        console.log('   üìÑ Title:', titleText || 'Not found');
        console.log('   üìù Description:', description ? 'Found' : 'Not found');
        console.log('====================================\n');
        
        return {
            emails: uniqueEmails,
            companyName,
            title: titleText,
            description
        };
        
    } catch (error) {
        console.error('\n‚ùå === SCRAPING ERROR ===');
        console.error('üîç Error name:', error.name);
        console.error('üí¨ Error message:', error.message);
        console.error('üìã Error stack:', error.stack);
        console.error('‚è±Ô∏è Scraping elapsed:', Date.now() - scrapeStartTime, 'ms');
        
        if (error.name === 'AbortError') {
            console.error('‚è∞ Scraping timed out after 10 seconds');
        } else {
            console.error('üìä Other scraping error occurred');
        }
        
        console.error('====================================\n');
        
        return {
            emails: [],
            companyName: null,
            title: null,
            description: null
        };
    }
}

// Helper: Research owner
async function researchOwner(companyName, url, openai) {
    console.log('üîß === OWNER RESEARCH START ===');
    console.log('üè¢ Company name:', companyName);
    console.log('üåê Website URL:', url);
    console.log('ü§ñ Model: gpt-4o-mini');
    console.log('üìä Max tokens: 400');
    
    const researchStartTime = Date.now();
    
    if (!companyName) {
        console.log('‚ö†Ô∏è No company name provided, skipping research');
        console.log('====================================\n');
        return 'Company information not found';
    }
    
    try {
        console.log('üìç Step 1: Preparing research prompt...');
        const prompt = `Find brief information about company "${companyName}" (website: ${url}).

Using publicly available information, provide:
- Full company name and legal form
- Main business activity
- Any notable achievements

Keep it brief (2-3 sentences). If no info found, say so honestly.

Respond in Russian if company is Russian, in English otherwise.`;
        
        console.log('üìù Prompt length:', prompt.length);
        console.log('üìù Prompt preview:', prompt.substring(0, 200) + '...');
        
        console.log('üìç Step 2: Calling OpenAI API for research...');
        const apiStart = Date.now();
        
        const completion = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages: [{
                role: 'user',
                content: prompt
            }],
            max_tokens: 400
        });
        
        const apiTime = Date.now() - apiStart;
        console.log('‚úÖ Research API call completed in', apiTime, 'ms');
        console.log('üìä Usage tokens:', completion.usage);
        console.log('üìä Finish reason:', completion.choices[0].finish_reason);
        
        const result = completion.choices[0].message.content;
        const totalTime = Date.now() - researchStartTime;
        
        console.log('‚úÖ Owner research completed in', totalTime, 'ms');
        console.log('üìÑ Result length:', result.length);
        console.log('üìÑ Result preview:', result.substring(0, 200) + '...');
        console.log('====================================\n');
        
        return result;
        
    } catch (error) {
        console.error('\n‚ùå === OWNER RESEARCH ERROR ===');
        console.error('üîç Error name:', error.name);
        console.error('üí¨ Error message:', error.message);
        console.error('üìä Error status:', error.status);
        console.error('üîë Error code:', error.code);
        console.error('üìã Error type:', error.type);
        console.error('‚è±Ô∏è Research elapsed:', Date.now() - researchStartTime, 'ms');
        console.error('üìä Full error:', JSON.stringify(error, null, 2));
        console.error('====================================\n');
        
        return 'Failed to research company';
    }
}

// Helper: Generate proposal
async function generateProposal(data) {
    console.log('üîß === PROPOSAL GENERATION START ===');
    
    const { url, zones, language, companyName, _emails, ownerInfo, openai } = data;
    
    console.log('üåê Website URL:', url);
    console.log('üåê Language:', language);
    console.log('üè¢ Company name:', companyName || 'Not found');
    console.log('üìß Emails count:', _emails?.length || 0);
    console.log('üéØ Total zones:', zones?.length || 0);
    console.log('üë§ Owner info length:', ownerInfo?.length || 0);
    console.log('ü§ñ Model: gpt-4o-mini');
    console.log('üìä Max tokens: 1500');
    console.log('üé≤ Temperature: 0.7');
    
    const proposalStartTime = Date.now();
    
    try {
        console.log('üìç Step 1: Filtering available zones...');
        const availableZones = zones.filter(z => z.available);
        console.log('‚úÖ Available zones:', availableZones.length);
        console.log('üìä All zones:', zones.map(z => `${z.name}: ${z.available ? '‚úÖ' : '‚ùå'}`).join(', '));
        
        if (availableZones.length === 0) {
            console.log('‚ö†Ô∏è No available zones found, returning early');
            const noZonesMessage = language === 'en' ?
                'No available advertising spaces found on this website.' :
                '–ù–∞ –¥–∞–Ω–Ω–æ–º —Å–∞–π—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –º–µ—Å—Ç.';
            console.log('üìÑ No zones message:', noZonesMessage);
            console.log('====================================\n');
            return noZonesMessage;
        }
        
        console.log('üìç Step 2: Preparing zones text...');
        const zonesText = availableZones.map((z, i) => {
            const zoneInfo = `${i + 1}. ${z.name} ‚Äî ${z.description}`;
            console.log(`   üìç Zone ${i + 1}:`, z.name, '| Available:', z.available, '| Size:', z.size, '| Priority:', z.priority);
            return zoneInfo;
        }).join('\n');
        
        console.log('üìù Zones text length:', zonesText.length);
        console.log('üìù Zones preview:', zonesText.substring(0, 300) + '...');
        
        console.log('üìç Step 3: Building proposal prompt...');
        const isEnglish = language === 'en';
        console.log('üåê Language detected:', isEnglish ? 'English' : 'Russian');
        
        const prompt = isEnglish ?
            `Write a professional advertising proposal email in English.

Website: ${url}
Company: ${companyName || 'Website owner'}
Background: ${ownerInfo}

Available advertising zones:
${zonesText}

Structure:
1. Personalized greeting
2. Compliment about their website
3. Brief about Adlook (Russian SSP platform founded in 2018)
4. List advertising opportunities with descriptions
5. Value proposition (revenue potential, formats, analytics)
6. Call to action

Professional tone. No asterisks (*). Full email text in English.` :
            `–ù–∞–ø–∏—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–°–∞–π—Ç: ${url}
–ö–æ–º–ø–∞–Ω–∏—è: ${companyName || '–í–ª–∞–¥–µ–ª–µ—Ü —Å–∞–π—Ç–∞'}
–°–ø—Ä–∞–≤–∫–∞: ${ownerInfo}

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –º–µ—Å—Ç–∞:
${zonesText}

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∏—Å—å–º–∞:
1. –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –ø—Ä–æ –∏—Ö —Å–∞–π—Ç/–∫–æ–Ω—Ç–µ–Ω—Ç
3. –ö—Ä–∞—Ç–∫–æ –ø—Ä–æ Adlook (—Ä–æ—Å—Å–∏–π—Å–∫–∞—è SSP-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –æ—Å–Ω–æ–≤–∞–Ω–∞ –≤ 2018)
4. –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
5. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥, —Ñ–æ—Ä–º–∞—Ç—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)
6. –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é

–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω. –ë–ï–ó –∑–≤—ë–∑–¥–æ—á–µ–∫ (*). –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.`;
        
        console.log('üìù Prompt length:', prompt.length);
        console.log('üìù Prompt preview:', prompt.substring(0, 400) + '...');
        
        console.log('üìç Step 4: Calling OpenAI API for proposal generation...');
        const apiStart = Date.now();
        
        const completion = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages: [{ role: 'user', content: prompt }],
            max_tokens: 1500,
            temperature: 0.7
        });
        
        const apiTime = Date.now() - apiStart;
        console.log('‚úÖ Proposal API call completed in', apiTime, 'ms');
        console.log('üìä Usage tokens:', completion.usage);
        console.log('üìä Finish reason:', completion.choices[0].finish_reason);
        
        const result = completion.choices[0].message.content;
        const totalTime = Date.now() - proposalStartTime;
        
        console.log('‚úÖ Proposal generation completed in', totalTime, 'ms');
        console.log('üìÑ Result length:', result.length);
        console.log('üìÑ Result preview:', result.substring(0, 400) + '...');
        
        // Count some basic metrics
        const wordCount = result.split(/\s+/).length;
        const sentenceCount = result.split(/[.!?]+/).length - 1;
        const lineCount = result.split('\n').length;
        
        console.log('üìä Proposal metrics:');
        console.log('   üìù Word count:', wordCount);
        console.log('   üìù Sentence count:', sentenceCount);
        console.log('   üìù Line count:', lineCount);
        console.log('====================================\n');
        
        return result;
        
    } catch (error) {
        console.error('\n‚ùå === PROPOSAL GENERATION ERROR ===');
        console.error('üîç Error name:', error.name);
        console.error('üí¨ Error message:', error.message);
        console.error('üìä Error status:', error.status);
        console.error('üîë Error code:', error.code);
        console.error('üìã Error type:', error.type);
        console.error('‚è±Ô∏è Proposal elapsed:', Date.now() - proposalStartTime, 'ms');
        console.error('üìä Full error:', JSON.stringify(error, null, 2));
        console.error('====================================\n');
        
        return 'Failed to generate proposal';
    }
}
