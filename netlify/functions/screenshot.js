const chromium = require('@sparticuz/chromium');
const puppeteer = require('puppeteer-core');
const sharp = require('sharp');

/**
 * Optimize screenshot for Vision API
 * Compress if size exceeds maxSizeMB limit
 */
async function optimizeScreenshotForVision(screenshot, maxSizeMB = 5) {
    const initialSizeKB = (screenshot.length / 1024).toFixed(2);
    const initialSizeMB = screenshot.length / (1024 * 1024);
    
    console.log(`üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ${initialSizeKB} KB (${initialSizeMB.toFixed(2)} MB)`);
    
    if (initialSizeMB <= maxSizeMB) {
        console.log(`‚úÖ –†–∞–∑–º–µ—Ä –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞ (${maxSizeMB} MB), —Å–∂–∞—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
        return screenshot;
    }
    
    console.log(`‚öôÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç > ${maxSizeMB}MB, –ø—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ...`);
    
    const targetQuality = Math.max(50, Math.floor(70 * (maxSizeMB / initialSizeMB)));
    
    const optimized = await sharp(screenshot)
        .resize(1280, 1024, {
            fit: 'inside',
            withoutEnlargement: true
        })
        .jpeg({
            quality: targetQuality,
            progressive: true,
            mozjpeg: true
        })
        .toBuffer();
    
    const finalSizeKB = (optimized.length / 1024).toFixed(2);
    const finalSizeMB = optimized.length / (1024 * 1024);
    
    console.log(`‚úÖ –°–∂–∞—Ç–æ –¥–æ: ${finalSizeKB} KB (${finalSizeMB.toFixed(2)} MB, –∫–∞—á–µ—Å—Ç–≤–æ: ${targetQuality}%)`);
    
    return optimized;
}

/**
 * Load page with retry logic and detailed error reporting
 */
async function loadPageWithRetry(page, url, maxRetries = 3) {
    const errors = [];
    
    for (let i = 0; i < maxRetries; i++) {
        try {
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${maxRetries} –∑–∞–≥—Ä—É–∑–∏—Ç—å ${url}`);
            console.log(`‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date().toISOString()}`);
            
            const startTime = Date.now();
            
            await page.goto(url, { 
                waitUntil: 'domcontentloaded',
                timeout: 60000
            });
            
            const loadTime = Date.now() - startTime;
            console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ ${loadTime}ms`);
            
            return { success: true, attempts: i + 1, loadTime, errors };
            
        } catch (error) {
            const errorDetails = {
                attempt: i + 1,
                time: new Date().toISOString(),
                errorName: error.name,
                errorMessage: error.message,
                errorStack: error.stack,
                url: url
            };
            
            errors.push(errorDetails);
            
            console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:`);
            console.error(`   –¢–∏–ø –æ—à–∏–±–∫–∏: ${error.name}`);
            console.error(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
            console.error(`   URL: ${url}`);
            
            if (i === maxRetries - 1) {
                // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
                const errorReport = {
                    success: false,
                    url: url,
                    totalAttempts: maxRetries,
                    errors: errors,
                    summary: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∞–π—Ç –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫`,
                    lastError: error.message
                };
                
                throw new Error(JSON.stringify(errorReport));
            }
            
            console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
    }
}

exports.handler = async (event) => {
    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ error: 'Method not allowed' })
        };
    }

    const { url } = JSON.parse(event.body);
    
    console.log('üìä === –ù–ê–ß–ê–õ–û –ê–ù–ê–õ–ò–ó–ê ===');
    console.log(`URL: ${url}`);
    console.log(`Timestamp: ${new Date().toISOString()}`);
    
    const performanceMetrics = {
        startTime: Date.now(),
        browserLaunch: null,
        pageLoad: null,
        screenshot: null,
        totalTime: null
    };
    
    let browser;
    try {
        // Launch browser
        console.log('üöÄ Launching browser...');
        const launchStart = Date.now();
        
        browser = await puppeteer.launch({
            args: chromium.args,
            defaultViewport: chromium.defaultViewport,
            executablePath: await chromium.executablePath(),
            headless: chromium.headless,
        });
        
        performanceMetrics.browserLaunch = Date.now() - launchStart;
        console.log(`‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω –∑–∞ ${performanceMetrics.browserLaunch}ms`);
        
        // Open page
        const page = await browser.newPage();
        await page.setViewport({ width: 1920, height: 1080 });
        
        // –û—Ç–∫–ª—é—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏...');
        await page.setRequestInterception(true);
        
        let blockedResources = 0;
        page.on('request', (req) => {
            const resourceType = req.resourceType();
            if (['font', 'media', 'stylesheet'].includes(resourceType)) {
                blockedResources++;
                req.abort();
            } else {
                req.continue();
            }
        });
        
        console.log(`‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ª–∏—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞`);
        
        // Navigate with retry logic
        console.log('üåê Navigating to page...');
        const pageLoadStart = Date.now();
        
        const result = await loadPageWithRetry(page, url);
        
        performanceMetrics.pageLoad = Date.now() - pageLoadStart;
        
        console.log('üìä === –û–¢–ß–ï–¢ –û –ó–ê–ì–†–£–ó–ö–ï ===');
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${result.success}`);
        console.log(`üî¢ –ü–æ–ø—ã—Ç–æ–∫ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å: ${result.attempts}`);
        console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${result.loadTime}ms`);
        console.log(`üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: ${blockedResources}`);
        
        if (result.errors.length > 0) {
            console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏ (–¥–æ —É—Å–ø–µ—Ö–∞):`);
            result.errors.forEach((err, idx) => {
                console.log(`  ${idx + 1}. ${err.errorMessage}`);
            });
        }
        
        // Wait a bit for dynamic content to render
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Capture screenshot
        console.log('üì∏ Capturing screenshot...');
        const screenshotStart = Date.now();
        
        const screenshot = await page.screenshot({
            type: 'jpeg',
            quality: 80,
            fullPage: false
        });
        
        performanceMetrics.screenshot = Date.now() - screenshotStart;
        console.log(`‚úÖ Screenshot captured –∑–∞ ${performanceMetrics.screenshot}ms`);
        
        // Optimize screenshot for Vision API
        console.log('üîß Optimizing screenshot for Vision API...');
        const optimizedScreenshot = await optimizeScreenshotForVision(screenshot);
        
        await browser.close();
        
        // Return base64
        const base64 = optimizedScreenshot.toString('base64');
        
        performanceMetrics.totalTime = Date.now() - performanceMetrics.startTime;
        
        console.log('üìä === –ú–ï–¢–†–ò–ö–ò –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===');
        console.log(JSON.stringify(performanceMetrics, null, 2));
        console.log('‚úÖ === SCREENSHOT SUCCESS ===');
        
        return {
            statusCode: 200,
            headers: { 
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type',
                'Access-Control-Allow-Methods': 'POST, OPTIONS'
            },
            body: JSON.stringify({
                success: true,
                screenshot: `data:image/jpeg;base64,${base64}`,
                metadata: {
                    url: url,
                    attempts: result.attempts,
                    loadTime: result.loadTime,
                    blockedResources: blockedResources,
                    performanceMetrics: performanceMetrics,
                    timestamp: new Date().toISOString()
                }
            })
        };
        
    } catch (error) {
        console.error('‚ùå === –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ===');
        
        let errorReport;
        try {
            errorReport = JSON.parse(error.message);
        } catch {
            errorReport = {
                success: false,
                url: url,
                summary: error.message,
                errorType: error.name,
                errorStack: error.stack
            };
        }
        
        console.error('üìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û–ë –û–®–ò–ë–ö–ï:');
        console.error(JSON.stringify(errorReport, null, 2));
        
        if (browser) await browser.close();
        
        // –í–µ—Ä–Ω—É—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É
        return {
            statusCode: 500,
            headers: { 
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            },
            body: JSON.stringify({
                success: false,
                error: '‚è±Ô∏è –°–∞–π—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ URL –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                details: errorReport,
                timestamp: new Date().toISOString()
            })
        };
    }
};
