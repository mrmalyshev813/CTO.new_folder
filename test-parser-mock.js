const { chromium } = require('playwright');
const cheerio = require('cheerio');

// Mock OpenAI responses for testing
const mockVisionResponse = {
    zones: [
        {
            name: "Header",
            available: true,
            size: "728x90",
            priority: "high",
            description: "–í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Å–∞–π—Ç–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π, –æ—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞"
        },
        {
            name: "Sidebar",
            available: true,
            size: "300x250",
            priority: "medium",
            description: "–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–ø—Ä–∞–≤–∞, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤"
        },
        {
            name: "Content",
            available: true,
            size: "468x60",
            priority: "high",
            description: "–í–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        }
    ],
    language: "ru"
};

const mockOwnerInfo = {
    insights: "NLab Team - —ç—Ç–æ –≤–µ–±-—Å—Ç—É–¥–∏—è, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Å–∞–π—Ç–æ–≤ –∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –ö–æ–º–ø–∞–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—Å–ª—É–≥–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞."
};

const mockProposal = `–¢–µ–º–∞: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ä–µ–∫–ª–∞–º–µ –Ω–∞ —Å–∞–π—Ç–µ https://nlabteam.com

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–•–æ—á—É –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã NLab Team. –í–∞—à —Å–∞–π—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç –∏ –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–π –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.

–ù–µ–º–Ω–æ–≥–æ –æ –Ω–∞—Å: Adlook ‚Äî —ç—Ç–æ —Ä–æ—Å—Å–∏–π—Å–∫–∞—è SSP-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ (Supply-Side Platform), –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –≤ 2018 –≥–æ–¥—É –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ. –ú—ã –ø–æ–º–æ–≥–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º —Å–∞–π—Ç–æ–≤ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ä–µ—Å—É—Ä—Å—ã.

–ú—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à —Å–∞–π—Ç –∏ –≤—ã–¥–µ–ª–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∑–æ–Ω:
1. Header ‚Äî –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Å–∞–π—Ç–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π, –æ—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞
2. Sidebar ‚Äî –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–ø—Ä–∞–≤–∞, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤
3. Content ‚Äî –í–Ω—É—Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: –æ—Ç 50,000 –¥–æ 150,000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü.

–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:
- –°—Ä–æ–∫–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: –æ—Ç –æ–¥–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
- –§–æ—Ä–º–∞—Ç—ã: –±–∞–Ω–Ω–µ—Ä—ã, –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞, –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞
- –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º—ã –ø–æ–¥ –≤–∞—à —Å–∞–π—Ç

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º–∏, Adlook`;

async function captureScreenshot(url) {
    console.log('üì∏ Capturing screenshot for:', url);
    
    let browser;
    try {
        browser = await chromium.launch({
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        
        const page = await browser.newPage({
            viewport: { width: 1920, height: 1080 }
        });
        
        await page.goto(url, { 
            waitUntil: 'networkidle',
            timeout: 30000 
        });
        
        const screenshot = await page.screenshot({
            fullPage: true,
            type: 'png'
        });
        
        console.log('‚úÖ Screenshot captured');
        
        const base64Screenshot = screenshot.toString('base64');
        return `data:image/png;base64,${base64Screenshot}`;
        
    } catch (error) {
        console.error('‚ùå Screenshot error:', error);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: ${error.message}`);
    } finally {
        if (browser) await browser.close();
    }
}

async function analyzeScreenshotForAds(url, screenshotDataUrl) {
    console.log('ü§ñ Analyzing screenshot with OpenAI Vision (MOCK)...');
    
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    console.log('‚úÖ Vision analysis complete (MOCK):', mockVisionResponse);
    return mockVisionResponse;
}

async function scrapeWebsiteData(url) {
    console.log('üîç Scraping website data...');
    
    try {
        let browser;
        try {
            browser = await chromium.launch({
                headless: true,
                args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            
            const page = await browser.newPage();
            await page.goto(url, { 
                waitUntil: 'networkidle',
                timeout: 30000 
            });
            
            const html = await page.content();
            await browser.close();
            
            const $ = cheerio.load(html);
            
            const emails = [];
            const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g;
            
            const text = $('body').text();
            const foundEmails = text.match(emailRegex) || [];
            emails.push(...foundEmails);
            
            $('a[href^="mailto:"]').each((i, el) => {
                const email = $(el).attr('href').replace('mailto:', '');
                emails.push(email);
            });
            
            let companyName = $('meta[property="og:site_name"]').attr('content') ||
                              $('meta[name="author"]').attr('content') ||
                              $('title').text().split('|')[0].trim();
            
            if (!companyName) {
                const footerText = $('footer').text();
                const match = footerText.match(/(–û–û–û|–ò–ü|–ê–û|–ó–ê–û|–ü–ê–û)\s+["¬´]?([^"¬ª\n]+)["¬ª]?/);
                if (match) companyName = match[0];
            }
            
            console.log('‚úÖ Found emails:', emails);
            console.log('‚úÖ Found company:', companyName);
            
            return {
                emails: [...new Set(emails)].filter(e => e && e.includes('@')),
                companyName,
                title: $('title').text(),
                description: $('meta[name="description"]').attr('content')
            };
            
        } finally {
            if (browser) await browser.close();
        }
        
    } catch (error) {
        console.error('‚ùå Scraping error:', error);
        return { emails: [], companyName: null };
    }
}

async function researchCompanyOwner(companyName, websiteUrl) {
    console.log('üîé Researching company owner (MOCK)...');
    
    if (!companyName) {
        return { owner: null, insights: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' };
    }
    
    await new Promise(resolve => setTimeout(resolve, 500));
    
    console.log('‚úÖ Research complete (MOCK)');
    return mockOwnerInfo;
}

async function generatePersonalizedProposal(data) {
    console.log('‚úçÔ∏è Generating personalized proposal (MOCK)...');
    
    await new Promise(resolve => setTimeout(resolve, 800));
    
    console.log('‚úÖ Proposal generated (MOCK)');
    return mockProposal;
}

async function analyzeWebsiteComplete(url) {
    console.log('\nüöÄ === STARTING COMPLETE ANALYSIS ===\n');
    
    try {
        console.log('STEP 1: Screenshot');
        const screenshotDataUrl = await captureScreenshot(url);
        
        console.log('\nSTEP 2: Vision Analysis');
        const visionAnalysis = await analyzeScreenshotForAds(url, screenshotDataUrl);
        
        console.log('\nSTEP 3: Scraping');
        const scraped = await scrapeWebsiteData(url);
        
        console.log('\nSTEP 4: Research');
        const ownerInfo = await researchCompanyOwner(scraped.companyName, url);
        
        console.log('\nSTEP 5: Generate Proposal');
        const proposal = await generatePersonalizedProposal({
            websiteUrl: url,
            zones: visionAnalysis.zones,
            language: visionAnalysis.language,
            companyName: scraped.companyName,
            ownerInfo,
            emails: scraped.emails
        });
        
        console.log('\n‚úÖ === ANALYSIS COMPLETE ===\n');
        
        return {
            success: true,
            screenshot: screenshotDataUrl,
            zones: visionAnalysis.zones,
            language: visionAnalysis.language,
            emails: scraped.emails,
            companyName: scraped.companyName,
            ownerInfo: ownerInfo.insights,
            proposal
        };
        
    } catch (error) {
        console.error('\n‚ùå === ANALYSIS FAILED ===');
        console.error('Error:', error.message);
        console.error('Stack:', error.stack);
        return {
            success: false,
            error: error.message
        };
    }
}

async function runTest(url) {
    console.log(`\n${'='.repeat(80)}`);
    console.log(`Testing: ${url}`);
    console.log('='.repeat(80));
    
    const startTime = Date.now();
    const result = await analyzeWebsiteComplete(url);
    const responseTime = Date.now() - startTime;
    
    console.log(`\nResponse Time: ${responseTime}ms (${(responseTime/1000).toFixed(2)}s)`);
    
    if (result.success) {
        console.log('\n‚úÖ SCREENSHOT CAPTURED: Success');
        console.log('‚úÖ VISION ANALYSIS: Completed');
        console.log(`‚úÖ ZONES DETECTED: ${result.zones.length} zones`);
        console.log(`‚úÖ EMAILS FOUND: ${result.emails.length} emails`);
        console.log(`‚úÖ COMPANY: ${result.companyName || 'Not found'}`);
        console.log(`‚úÖ LANGUAGE: ${result.language}`);
        console.log('‚úÖ PROPOSAL GENERATED: Success');
        
        if (result.zones.length > 0) {
            console.log('\nDetected Zones:');
            result.zones.forEach((zone, idx) => {
                console.log(`  ${idx + 1}. ${zone.name} - ${zone.available ? 'Available' : 'Not Available'} - ${zone.priority} priority`);
            });
        }
        
        if (result.emails.length > 0) {
            console.log('\nFound Emails:');
            result.emails.forEach((email, idx) => {
                console.log(`  ${idx + 1}. ${email}`);
            });
        }
        
        console.log('\nProposal Text Preview:');
        console.log('-'.repeat(80));
        const lines = result.proposal.split('\n');
        lines.slice(0, 15).forEach(line => console.log(line));
        if (lines.length > 15) {
            console.log('... (truncated)');
        }
        console.log('-'.repeat(80));
        
        const hasAsterisks = result.proposal.includes('*');
        if (hasAsterisks) {
            console.log('\n‚ùå ASTERISKS FOUND: Proposal contains * characters');
        } else {
            console.log('\n‚úÖ NO ASTERISKS: Proposal text clean');
        }
        
        console.log('\n‚úÖ OVERALL: Test PASSED for ' + url);
        
        return {
            url,
            success: true,
            responseTime,
            zonesCount: result.zones.length,
            zones: result.zones,
            emailsCount: result.emails.length,
            emails: result.emails,
            companyName: result.companyName,
            language: result.language,
            proposalLength: result.proposal.length,
            hasAsterisks
        };
        
    } else {
        console.log('\n‚ùå TEST FAILED');
        console.log('Error:', result.error);
        
        return {
            url,
            success: false,
            error: result.error,
            responseTime
        };
    }
}

if (require.main === module) {
    const url = process.argv[2];
    
    if (!url) {
        console.log('Usage: node test-parser-mock.js <url>');
        console.log('Example: node test-parser-mock.js https://nlabteam.com');
        process.exit(1);
    }
    
    runTest(url)
        .then(result => {
            process.exit(result.success ? 0 : 1);
        })
        .catch(error => {
            console.error('Fatal error:', error);
            process.exit(1);
        });
}

module.exports = { analyzeWebsiteComplete, runTest };